@{
    ViewBag.Title = "Users";
}

@using System.Web.WebPages
@using Hangfire.Common
@using WebApp.Resources.Views.Users
@model List<Services.ViewModels.HomeModels.AccountDataViewModel>

@section scripts
{
    <script>
        var item_to_delete;
        $(".deleteItem").click(function(e) {
            item_to_delete = $(this).data('id');
        });
        $('#btnContinueDelete').click(function() {
            window.location = "@Url.Action("RemoveAccount", "Users")" + "?accountId=" + item_to_delete;
        });
    </script>
    
    <script src="/Scripts/jquery-1.10.2.js"></script>
    <script src="/Scripts/jquery-1.10.2.min.js"></script>

    <script type="text/javascript">
        $(document).ready(function () {
            setInterval("$('#RefreshFormButton').click()", 1000);
        });

        function handleResult(ajaxContext) {
            var accounts = JSON.parse(ajaxContext);

            for(var accountId in accounts) {

                var account = accounts[accountId];

                var newMessages = createResultString(account);
                insertPushMessages(accountId, newMessages);

            }
        }

        function createResultString(account) {
            var result = "";

            for (var i = 0; i < account.length; i++) {
                var dateTime = createDateTime(account[i].DateTime);
                result += "<li>" + dateTime + ":" + account[i].NoticeText + "</li>";
            }

            return result;
        }

        function insertPushMessages(accountId, messages) {
            var accountMessageElementId = "#results" + accountId;;
            $(accountMessageElementId).empty();
            $(accountMessageElementId).append(messages);
        }

        function createDateTime(jsonDate) {
            var date = new Date(jsonDate);
            return "(" + date.getDate() + "." + (date.getMonth() + 1) + "." + date.getFullYear() + ") " + date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();
        }
    </script>
}
@Scripts.Render("~/scripts/jquery-1.10.2.min.js")
@Scripts.Render("~/scripts/jquery.unobtrusive-ajax.min.js")

@using (Ajax.BeginForm("GetPushMessages", new AjaxOptions { OnSuccess = "handleResult", InsertionMode = InsertionMode.Replace}))
{
    <input type="submit" id="RefreshFormButton" hidden="" />
}

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="alert-info alert"> @UsersTexts.AddNewAccount <a href="@Url.Action("Index", "UserEditor")"><i class="fa fa-plus-circle"></i></a></h3>
        <div class="row">
            <div class="col-md-2">
                <button type="button" class="btn btn-block btn-primary" onclick="location.href='@Url.Action("Index", "Users")'">@UsersTexts.AllUsersCount</button>
            </div>
            <div class="col-md-2">
                <button type="button" class="btn btn-block btn-primary" onclick="location.href='@Url.Action("Index", "Users", new { showWorking = true })'">@UsersTexts.WorkUsersCount</button>
            </div>
            <div class="col-md-2">
                <button type="button" class="btn btn-block btn-danger" onclick="location.href='@Url.Action("Index", "Users", new { showWithErrors = true })'">@UsersTexts.ErrorUsersCount</button>
            </div>
            <div class="col-md-6">
                <button type="button" class="btn btn-block btn-default">Показано @Model.Count() аккаунтов</button>
            </div>
        </div>
    </div>
    <div class="panel-body">
        @foreach (var accountData in @Model)
        {
            var account = accountData.Account;
            var accountInformation = accountData.AccountInformation;
            var jobQueues = accountData.JobQueues;

            var divClass = account.AuthorizationDataIsFailed || account.ProxyDataIsFailed || account.ConformationDataIsFailed ? "alert-danger" : "alert-success";
            var errorText = account.AuthorizationDataIsFailed ? @UsersTexts.CheckAuthorizationData : account.ProxyDataIsFailed ? @UsersTexts.CheckProxyData : account.ConformationDataIsFailed ? @UsersTexts.ConformationError : null;

            <div class="alert @divClass" style="padding-bottom: 0 !important">
                <div class="inline-half-text-left">
                    <div class="message-list-tittle">
                        <a id="@("group" + account.Id)">@account.Login</a>
                    </div>
                    <div class="inline-actions">
                        <a href="@Url.Action("Index", "Account", new {AccountId = account.Id})"><i class="fa fa-cogs"></i></a>
                    </div>
                    <div class="inline-actions">
                        <a href="@Url.Action("Index", "Friends", new {AccountId = account.Id, all = 1, pageNumber = 1})"><i class="fa fa-users"></i></a>
                    </div>
                    <div class="inline-actions">
                        <a href="@Url.Action("Index", "Options", new {AccountId = account.Id})"><i class="fa fa-book"></i></a>
                    </div>
                    <div class="inline-actions">
                        <a href="@Url.Action("Index", "UserEditor", new {AccountId = account.Id})"><i class="fa fa-pencil"></i></a>
                    </div>
                    <div class="inline-actions">
                        <a href="@Url.Action("Index", "Cookies", new {AccountId = account.Id})"><i class="fa fa-birthday-cake"></i></a>
                    </div>
                    <div class="inline-actions">
                        <a href="@Url.Action("Index", "GroupBlackList", new {groupId = account.GroupSettingsId})"><i class="fa fa-user-times"></i></a>
                    </div>
                    <div class="inline-actions">
                        @if (errorText != null)
                        {
                            <i class="fa fa-question-circle-o"></i>
                            @errorText
                        }
                    </div>
                </div>
                <div class="inline-half-text-right">
                    <div class="remove-message">
                        <a id="deleteItem" class="deleteItem" data-target="#basic" data-toggle="modal" data-id="@account.Id" href=""><i class="fa fa-close"></i> @UsersTexts.RemoveUser</a>
                    </div>
                </div>
                @{
                    string userLogClass = null;
                    if (!account.AuthorizationDataIsFailed && !account.ProxyDataIsFailed && !account.ConformationDataIsFailed)
                    {
                        userLogClass = "alert alert-info";
                    }
                    <div class="row @userLogClass" style="padding-left: 0 !important; padding-right: 0 !important">
                        @if (!account.AuthorizationDataIsFailed && !account.ProxyDataIsFailed && !account.ConformationDataIsFailed)
                        {
                            var blockId = "results" + accountData.Account.Id;
                            <div class="col-md-8">
                                <div class="alert alert-info" style="margin-bottom: 0 !important">
                                    <div class="inline-half">
                                        <ul id="@blockId"></ul>
                                    </div>
                                </div>
                            </div>
                        }
                        @if (accountInformation != null && !account.AuthorizationDataIsFailed && !account.ProxyDataIsFailed && !account.ConformationDataIsFailed)
                        {
                            <div class="col-md-4">
                                <div class="alert alert-info" style="margin-bottom: 0 !important">
                                    @UsersTexts.CountCurrentFriends :
                                    <a href="@Url.Action("Index", "Friends", new {accountId = accountData.Account.Id})">
                                        <span class="badge">
                                            @accountInformation.CountCurrentFriends
                                        </span>
                                    </a>
                                    <br />
                                    @UsersTexts.CountIncommingFriendsRequest :
                                    <a href="@Url.Action("Index", "FriendsIncomingRequests", new {accountId = accountData.Account.Id})">
                                        <span class="badge">
                                            @accountInformation.CountIncommingFriendsRequest
                                        </span>
                                    </a>
                                    <br />
                                </div>
                            </div>
                            
                            <br />
                            
                            if (jobQueues != null)
                            {
                                var emptyJobs = jobQueues.Count(model => StringExtensions.IsEmpty(model.FunctionStringName));
                                var countJobs = jobQueues.Count - emptyJobs;
                                var blockId = "jobs" + accountData.Account.Id;
                                <div class="col-md-4">
                                    <div class="container">
                                        <a href="#@blockId" class="btn btn-info" data-toggle="collapse">
                                            <i class="fa fa-tasks" aria-hidden="true"></i> 
                                            @UsersTexts.RunningJobs <br /> <b>@account.GroupSettingsName</b> <span class="badge">@countJobs</span>
                                        </a>
                                        <div id="@blockId" class="collapse">
                                            <ul class="list-group">
                                                @foreach (var jobQueue in jobQueues)
                                                {
                                                    if (jobQueue == null || jobQueue.FunctionStringName.IsEmpty())
                                                    {
                                                        continue;
                                                    }
                                                    <li class="list-group-item" style="padding: 2px;">
                                                        <small>@jobQueue.FunctionStringName 
                                                                @if (jobQueue.IsProcessed)
                                                                {
                                                                    <i class="fa fa-check-square-o" aria-hidden="true"></i>
                                                                }
                                                                else
                                                                {
                                                                    <i class="fa fa-clock-o" aria-hidden="true"></i>
                                                                }
                                                        </small >
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                }
            </div>
        }
    </div>
</div>


<div class="modal fade" id="basic" tabindex="-1" role="basic" aria-hidden="true" style="display: none;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>
                <h4 class="modal-title">Delete Confirmation</h4>
            </div>
            <div class="modal-body">
                <i class="fa fa-warning warning-message"></i> Are you sure you want to delete this user?
            </div>
            <div class="modal-footer">
                <button data-dismiss="modal" type="button" class="btn btn-default">Cancel</button>
                <button id="btnContinueDelete" type="button" class="btn btn-primary">Delete</button>
            </div>
        </div>
    </div>
</div>